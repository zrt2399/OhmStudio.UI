<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:converters="clr-namespace:OhmStudio.UI.Converters"
                    xmlns:controls="clr-namespace:OhmStudio.UI.Controls"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <converters:DisplayMemberPathConverter x:Key="DisplayMemberPathConverter"/>
    <converters:ColorConverter x:Key="colorConverter"/>
    <converters:AngleToPointConverter x:Key="angleToPointConverter"/>
    <converters:AngleToIsLargeConverter x:Key="angleToIsLargeConverter"/>
    <!--<converters:TextBlockPasswordConverter x:Key="TextBlockPasswordConverter"/>-->

    <SolidColorBrush x:Key="Pressed">#FF2E2E2E</SolidColorBrush>
    <SolidColorBrush x:Key="Focused">#AA555555</SolidColorBrush>
    <SolidColorBrush x:Key="EnabledWhenFalse">#FFAEABAB</SolidColorBrush>

    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Margin="-2">
                        <Border Name="borderEffect" Visibility="Collapsed" Margin="2.5" CornerRadius="2" Background="{Binding ElementName=Border,Path=Background}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="0" Color="{Binding ElementName=Border,Path=BorderBrush,Converter={StaticResource colorConverter}}"/>
                            </Border.Effect>
                        </Border>
                        <Border Name="Border" Margin="2" CornerRadius="2" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="#FFF2F4F5" BorderBrush="#FF96999C">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FFD1CCCC"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFD1D5D6"/>
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="#FF514949"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF1D1C1C"/>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilletButton" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Margin="-2">
                        <Border Name="borderEffect" Visibility="Collapsed" Margin="2.5" CornerRadius="2" Background="{Binding ElementName=Border,Path=Background}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="0" Color="{Binding ElementName=Border,Path=Background,Converter={StaticResource colorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border" Margin="2" CornerRadius="2" Background="#FF1EA973" TextBlock.Foreground="#FFFFFFFF">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="停   止">
                            <Setter TargetName="Border" Property="Background" Value="#FFCD5C5C" />
                        </Trigger>
                        <Trigger Property="Content" Value="Stop">
                            <Setter TargetName="Border" Property="Background" Value="#FFCD5C5C" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Value="{DynamicResource Pressed}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Value="{DynamicResource EnabledWhenFalse}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                            <Setter TargetName="Border" Value="{DynamicResource Focused}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilletButtonRed" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Margin="-2">
                        <Border Name="borderEffect" Visibility="Collapsed" Margin="2.5" CornerRadius="2" Background="{Binding ElementName=Border,Path=Background}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="0" Color="{Binding ElementName=Border,Path=Background,Converter={StaticResource colorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border" Margin="2" CornerRadius="2" Background="#FFCD5C5C" TextBlock.Foreground="#FFFFFFFF">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Value="{DynamicResource Pressed}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Value="{DynamicResource EnabledWhenFalse}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                            <Setter TargetName="Border" Value="{DynamicResource Focused}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultButton" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Margin="-2">
                        <Border Name="borderEffect" Visibility="Collapsed" Margin="2.5" CornerRadius="2" Background="{Binding ElementName=Border,Path=BorderBrush}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="0" Color="{Binding ElementName=Border,Path=BorderBrush,Converter={StaticResource colorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border" TextBlock.Foreground="#FFFFFFFF" Margin="2" BorderBrush="#FF2C84DD" Background="#FF499FEF" CornerRadius="2" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Value="{DynamicResource Pressed}" Property="Background" />
                            <Setter TargetName="Border" Value="{DynamicResource Pressed}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFD1D5D6" />
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="#FF514949" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Value="{DynamicResource Focused}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxStyle" TargetType="TextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="Border" Background="White" BorderBrush="#FFABADB3" SnapsToDevicePixels="True" Margin="{TemplateBinding Padding}"
                            BorderThickness="0,0,0,1">
                        <ScrollViewer Margin="1,0,0,0" x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5"></Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter TargetName="Border" Property="Background" Value="#FFF8F8F8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabItemStyle" TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <StackPanel Name="bbb" ClipToBounds="True">
                        <ContentPresenter Name="contentPresenter" ContentSource="Header" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{Binding HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType=ItemsControl}}" VerticalAlignment="{Binding VerticalContentAlignment,RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
                        <Border Name="bottom" Height="3" Visibility="Collapsed" Background="#FF3C6EFF" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="#FF5B7C92" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="bottom" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="#FF4B9FD8" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:SearchBar" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:SearchBar">
                    <DockPanel>
                        <ContentControl Style="{DynamicResource TitleWithTemplatedParent}"/>
                        <Border Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ScrollViewer Name="PART_ContentHost" VerticalAlignment="Center" />
                                <ContentControl Style="{DynamicResource PlaceHolderWithTemplatedParent}" Margin="{TemplateBinding Padding}"/>
                                <Button Padding="4,0" Grid.Column="2" BorderThickness="0" BorderBrush="Transparent" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}">
                                    <TextBlock FontFamily="/OhmStudio.UI;component/Fonts/#iconfont" ToolTip="{x:Null}">&#xe60f;</TextBlock>
                                </Button>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageAnimationStyle" TargetType="Page">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <!--60FPS DesiredFrameRate="60"-->
                        <Storyboard>
                            <ThicknessAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Margin" From="50,0,-50,0" To="0" DecelerationRatio="0.9"/>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" From="0" To="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Height" Value="24"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Viewbox>
                        <Border x:Name="toggleBorder" CornerRadius="13" Background="#D3D3D3" Width="40"
                                Height="26" BorderThickness="1" BorderBrush="Transparent" VerticalAlignment="Center">
                            <Ellipse Name="ellipse" Height="18" Width="18" Margin="3" HorizontalAlignment="Left" Fill="White"/>
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="toggleBorder" Property="Background" Value="#65C468"/>
                            <Setter TargetName="ellipse" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="#F0F0F0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleBorder" Property="Background" Value="#8FBC8F"/>
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleBorder" Property="Background" Value="#BEBEBE"/>
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:CircularProgressBar">
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="BrushStrokeThickness" Value="8"/>
        <Setter Property="StrokeThickness" Value="8"/>
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="BorderBrush" Value="#FF1FA7FC"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CircularProgressBar">
                    <Viewbox>
                        <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Path Stroke="{TemplateBinding Background}"
                                  StrokeThickness="{TemplateBinding StrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment SweepDirection="Clockwise"
                                                        Size="50,50"
                                                        Point="49.999127335374,7.61543361704753E-09"
                                                        IsLargeArc="True">
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{TemplateBinding BorderBrush}"
                                  StrokeThickness="{TemplateBinding BrushStrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment SweepDirection="Clockwise"
                                                        Size="50,50"
                                                        Point="{Binding Path=Angle,Converter={StaticResource angleToPointConverter},RelativeSource={RelativeSource AncestorType=ProgressBar}}"
                                                        IsLargeArc="{Binding Path=Angle,Converter={StaticResource angleToIsLargeConverter},RelativeSource={RelativeSource AncestorType=ProgressBar}}">
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                            <!--<Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                           Text="{Binding Tag,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type view:CircularProgressBar}}}"
                                           FontSize="{TemplateBinding FontSize}"
                                           Grid.Row="1"/>
                                <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                           Text="{Binding Path=Value,StringFormat={}{0}%,RelativeSource={RelativeSource TemplatedParent}}"
                                           FontSize="{TemplateBinding FontSize}"
                                           Grid.Row="2"/>
                            </Grid>-->
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                           Text="{Binding Title,RelativeSource={RelativeSource AncestorType=controls:CircularProgressBar}}"
                                           Grid.Row="1">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                <Style.Triggers>
                                                    <Trigger Property="Text" Value="">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                    <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                           Text="{Binding Path=Value,StringFormat={}{0}%,RelativeSource={RelativeSource TemplatedParent}}"
                                           Grid.Row="2"/>
                                </StackPanel>
                            </Grid>
                        </Canvas>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemContainerStyle" TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" Opacity="0.7" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Ellipse x:Name="ep" Width="12" Height="12" Fill="LightGray" Cursor="Hand"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ep" Value="Gray"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:RollBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:RollBox">
                    <Grid ClipToBounds="True">
                        <ListBox x:Name="PART_ListBox"
                                 Panel.ZIndex="10"
                                 ItemContainerStyle="{StaticResource ListBoxItemContainerStyle}"  
                                 SelectedIndex="0"
                                 BorderThickness="0"
                                 HorizontalAlignment="Right" 
                                 VerticalAlignment="Bottom" 
                                 Background="Transparent"
                                 Margin="0,0,20,20"
                                 Height="24">
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                        <ContentControl x:Name="PART_NEXT_Content"/>
                        <ContentControl x:Name="PART_CURR_Content"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--自动添加时内容居中-->
    <Style x:Key="GridCellCenterStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Background" Value="#FFAAAAAA"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <Style x:Key="ListBoxItemCheckBoxStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Name="Border">
                        <CheckBox IsChecked="{Binding IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                  Foreground="{TemplateBinding Foreground}"
                                  Margin="0,2">
                            <CheckBox.Content>
                                <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                                    <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                                    <Binding Path="." />
                                </MultiBinding>
                            </CheckBox.Content>
                        </CheckBox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemMouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemMouseOverBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemMouseOverForeground}" />
                        </MultiTrigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemSelectedInactiveBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedInactiveBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedInactiveForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemSelectedActiveBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedActiveBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedActiveForeground}" />
                        </MultiTrigger>-->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemSelectedActiveBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedActiveBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedActiveForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemDisabledBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemDisabledBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="ListBoxItemCheckBoxDataTemplate">
        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected}">
            <CheckBox.Content>
                <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                    <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                    <Binding Path="." />
                </MultiBinding>
            </CheckBox.Content>
        </CheckBox>
    </DataTemplate>

    <Style TargetType="controls:CheckComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CheckComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{DynamicResource TitleWithTemplatedParent}"/>
                        <Border Grid.ColumnSpan="2"
                                Name="Border"
                                Grid.Column="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"/>
                        <TextBox Padding="{TemplateBinding Padding}"
                                 Grid.Column="1"
                                 Name="PART_EditableTextBox"
                                 Margin="1,1,0,1"
                                 BorderBrush="Transparent"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 Text="{Binding Text,RelativeSource={RelativeSource TemplatedParent}}"
                                 IsReadOnly="{Binding IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ToggleButton x:Name="DropDownButton"
                                     ClickMode="Release"
                                     Grid.Column="2"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     Background="{DynamicResource CommonControlsComboBoxGlyphBackground}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     Foreground="{DynamicResource CommonControlsComboBoxGlyph}"
                                     IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                     Style="{DynamicResource ToolBarComboBoxTransparentButtonStyle}"/>
                        <Popup Name="PART_Popup"
                               AllowsTransparency="True"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               PlacementTarget="{Binding ElementName=Border}"
                               IsOpen="{Binding IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                               StaysOpen="False">
                            <theme:SystemDropShadowChrome Name="Shadow"
                                                          MinWidth="{TemplateBinding ActualWidth}"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                          Color="Transparent">
                                <Border Background="{DynamicResource CommonControlsComboBoxListBackground}"
                                        BorderBrush="{DynamicResource CommonControlsComboBoxListBorder}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Name="PART_Invert">
                                                <DockPanel>
                                                    <Path Fill="{Binding ElementName=invert,Path=Foreground}" Stretch="Uniform"
                                                          Height="{Binding RelativeSource={RelativeSource AncestorType=DockPanel},Path=ActualHeight}"
                                                          Data="M200 1050H1000A50 50 0 0 0 1050 1000V200A50 50 0 0 0 1000 150H200A50 50 0 0 0 150 200V1000A50 50 0 0 0 200 1050zM350 650V550H850V650H350z"/>
                                                    <TextBlock Margin="4,0,0,0" Name="invert">反选</TextBlock>
                                                </DockPanel>
                                            </Button>
                                            <Button Name="PART_SelectAll">
                                                <DockPanel>
                                                    <Path Fill="{Binding ElementName=selectAll,Path=Foreground}" Stretch="Uniform"
                                                          Height="{Binding RelativeSource={RelativeSource AncestorType=DockPanel},Path=ActualHeight}"
                                                          Data="M200 1050H1000A50 50 0 0 0 1050 1000V200A50 50 0 0 0 1000 150H200A50 50 0 0 0 150 200V1000A50 50 0 0 0 200 1050zM550.15 400L903.65 753.55L832.9499999999999 824.25L550.15 541.4L408.7 682.85L338 612.15L550.15 400z">
                                                        <Path.LayoutTransform>
                                                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                                        </Path.LayoutTransform>
                                                    </Path>
                                                    <TextBlock Margin="4,0,0,0" Name="selectAll">选择全部</TextBlock>
                                                </DockPanel>
                                            </Button>
                                            <Button Name="PART_DeSelectAll">
                                                <DockPanel>
                                                    <Path Fill="{Binding ElementName=deselectAll,Path=Foreground}" Stretch="Uniform"
                                                          Height="{Binding RelativeSource={RelativeSource AncestorType=DockPanel},Path=ActualHeight}"
                                                          Data="M200 1050H1000A50 50 0 0 0 1050 1000V200A50 50 0 0 0 1000 150H200A50 50 0 0 0 150 200V1000A50 50 0 0 0 200 1050zM250 950V250H950V950H250z"/>
                                                    <TextBlock Margin="4,0,0,0" Name="deselectAll">取消全部</TextBlock>
                                                </DockPanel>
                                            </Button>
                                        </StackPanel>
                                        <ListBox x:Name="PART_ListBox"
                                                 Grid.Row="1"
                                                 BorderThickness="0"
                                                 BorderBrush="Transparent"
                                                 VirtualizingPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.IsVirtualizingWhenGrouping="{Binding Path=(VirtualizingPanel.IsVirtualizingWhenGrouping),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.ScrollUnit="{Binding Path=(VirtualizingPanel.ScrollUnit),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.CacheLength="{Binding Path=(VirtualizingPanel.CacheLength),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.CacheLengthUnit="{Binding Path=(VirtualizingPanel.CacheLengthUnit),RelativeSource={RelativeSource TemplatedParent}}"
                                                 VirtualizingPanel.IsContainerVirtualizable="{Binding Path=(VirtualizingPanel.IsContainerVirtualizable),RelativeSource={RelativeSource TemplatedParent}}"
                                                 ItemsSource="{TemplateBinding ItemsSource}"
                                                 DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                 SelectionMode="Multiple"
                                                 ItemContainerStyle="{StaticResource ListBoxItemCheckBoxStyle}"/>
                                        <!--ItemContainerStyle="{StaticResource ListBoxItemCheckBoxStyle}"-->
                                        <!--ItemTemplate="{StaticResource ListBoxItemCheckBoxDataTemplate}"-->
                                    </Grid>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundHover}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphHover}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundFocused}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphFocused}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundFocused}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextFocused}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundDisabled}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderDisabled}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextDisabled}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundPressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextPressed}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="SnapsToDevicePixels" Value="True" />
                            <Setter TargetName="Shadow" Property="Color" Value="{DynamicResource ControlShadow}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Shadow" Property="MinHeight" Value="95" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextColumnEditingElementStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="ComboBoxColumnEditingElementStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="TextBlockPassword" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Text, Converter={StaticResource TextBlockPasswordConverter}}"/>-->
        <Setter Property="TextDecorations">
            <Setter.Value>
                <TextDecorationCollection>
                    <TextDecoration>
                        <TextDecoration.Pen>
                            <Pen Thickness="12" Brush="Gray" EndLineCap="Round" StartLineCap="Round" DashCap="Round">
                                <Pen.DashStyle>
                                    <DashStyle Dashes="0.0,1.2" Offset="0.6"/>
                                </Pen.DashStyle>
                            </Pen>
                        </TextDecoration.Pen>
                        <TextDecoration.Location>
                            <TextDecorationLocation>Strikethrough</TextDecorationLocation>
                        </TextDecoration.Location>
                    </TextDecoration>
                </TextDecorationCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Transparent"/>
    </Style>

</ResourceDictionary>