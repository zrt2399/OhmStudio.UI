<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attaches="clr-namespace:OhmStudio.UI.Attaches"
                    xmlns:controls="clr-namespace:OhmStudio.UI.Controls"
                    xmlns:converters="clr-namespace:OhmStudio.UI.Converters"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <ResourceDictionary.MergedDictionaries>
        <!--  Common Control Styles  -->
        <ResourceDictionary Source="pack://application:,,,/OhmStudio.UI;Component/Styles/VS/Base/ControlsBase.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="InputControlPadding">2,2</Thickness>

    <converters:DisplayMemberPathConverter x:Key="DisplayMemberPathConverter" />
    <converters:BrushToColorConverter x:Key="BrushToColorConverter" />
    <converters:AngleToPointConverter x:Key="AngleToPointConverter" />
    <converters:AngleToIsLargeConverter x:Key="AngleToIsLargeConverter" />
    <converters:DropShadowMarginConverter x:Key="DropShadowMarginConverter" />
    <converters:BorderCornerRadiusConverter x:Key="BorderCornerRadiusConverter" />

    <SolidColorBrush x:Key="Pressed">#FF2E2E2E</SolidColorBrush>
    <SolidColorBrush x:Key="Focused">#AA555555</SolidColorBrush>
    <SolidColorBrush x:Key="Disabled">#FFAEABAB</SolidColorBrush>

    <Style x:Key="DropShadowControlBaseStyle" TargetType="controls:DropShadowControl">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:DropShadowControl">
                    <controls:SimplePanel>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="{Binding BlurRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Direction="{Binding ShadowDirection, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Opacity="{Binding ShadowOpacity, RelativeSource={RelativeSource TemplatedParent}}"
                                                  RenderingBias="{Binding RenderingBias, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ShadowDepth="{Binding ShadowDepth, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Color="{Binding ShadowColor, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DropShadowControlBaseStyle}" TargetType="controls:DropShadowControl" />

    <Style x:Key="ClassicButton" TargetType="Button">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="#FFF2F4F5" />
        <Setter Property="BorderBrush" Value="#FF96999C" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="BorderAttach.CornerRadius" Value="2" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:SimplePanel Margin="-2">
                        <Border Name="borderEffect"
                                Margin="{Binding ElementName=Border, Path=Margin}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding ElementName=Border, Path=CornerRadius}"
                                Visibility="Collapsed">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="6"
                                                  ShadowDepth="0"
                                                  Color="{Binding ElementName=Border, Path=BorderBrush, Converter={StaticResource BrushToColorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border"
                                Margin="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF1D1C1C" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FFD1CCCC" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFD1D5D6" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="#FF514949" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultButton" TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#FF499FEF" />
        <Setter Property="BorderBrush" Value="#FF2C84DD" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="BorderAttach.CornerRadius" Value="2" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:SimplePanel Margin="-2">
                        <Border Name="borderEffect"
                                Margin="{Binding ElementName=Border, Path=Margin}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding ElementName=Border, Path=CornerRadius}"
                                Visibility="Collapsed">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="6"
                                                  ShadowDepth="0"
                                                  Color="{Binding ElementName=Border, Path=BorderBrush, Converter={StaticResource BrushToColorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border"
                                Margin="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Focused}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Pressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFD1D5D6" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="#FF514949" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatButtonGreen" TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#FF1EA973" />
        <Setter Property="BorderBrush" Value="#FF1EA973" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="BorderAttach.CornerRadius" Value="2" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:SimplePanel Margin="-2">
                        <Border Name="borderEffect"
                                Margin="{Binding ElementName=Border, Path=Margin}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding ElementName=Border, Path=CornerRadius}"
                                Visibility="Collapsed">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="6"
                                                  ShadowDepth="0"
                                                  Color="{Binding ElementName=Border, Path=BorderBrush, Converter={StaticResource BrushToColorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border"
                                Margin="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="停   止">
                            <Setter TargetName="Border" Property="Background" Value="#FFCD5C5C" />
                        </Trigger>
                        <Trigger Property="Content" Value="Stop">
                            <Setter TargetName="Border" Property="Background" Value="#FFCD5C5C" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Focused}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Pressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Disabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Disabled}" />
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatButtonRed" TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#FFCD5C5C" />
        <Setter Property="BorderBrush" Value="#FFCD5C5C" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="BorderAttach.CornerRadius" Value="2" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:SimplePanel Margin="-2">
                        <Border Name="borderEffect"
                                Margin="{Binding ElementName=Border, Path=Margin}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding ElementName=Border, Path=CornerRadius}"
                                Visibility="Collapsed">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="6"
                                                  ShadowDepth="0"
                                                  Color="{Binding ElementName=Border, Path=BorderBrush, Converter={StaticResource BrushToColorConverter}}" />
                            </Border.Effect>
                        </Border>
                        <Border Name="Border"
                                Margin="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Focused}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Pressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Disabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Disabled}" />
                            <Setter TargetName="borderEffect" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockBaseStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>
    <Style BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock" />

    <Style x:Key="DefaultTabItem" TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <StackPanel ClipToBounds="True">
                        <ContentPresenter Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                          ContentSource="Header"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Name="bottom"
                                Height="3"
                                Background="#FF3C6EFF"
                                Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#FF5B7C92" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="bottom" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#FF4B9FD8" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchBarBaseStyle" TargetType="controls:SearchBar">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:SearchBar">
                    <DockPanel>
                        <ContentControl Style="{DynamicResource TitleWithTemplatedParent}" />
                        <Border Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ScrollViewer Name="PART_ContentHost" />
                                <ContentControl Margin="{TemplateBinding Padding}" Style="{DynamicResource PlaceHolderWithTemplatedParent}" />
                                <Button Grid.Column="1"
                                        Padding="4,0"
                                        attaches:BorderAttach.CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BorderCornerRadiusConverter}}"
                                        BorderBrush="Transparent"
                                        BorderThickness="0"
                                        Command="{TemplateBinding Command}"
                                        CommandParameter="{TemplateBinding CommandParameter}"
                                        CommandTarget="{TemplateBinding CommandTarget}">
                                    <TextBlock FontFamily="/OhmStudio.UI;component/Fonts/#iconfont" ToolTip="{x:Null}">&#xe60f;</TextBlock>
                                </Button>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:SearchBar">
        <Setter Property="DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type TextBox}}" />
        <Setter Property="DynamicStyleProvider.Derived" Value="{DynamicResource SearchBarBaseStyle}" />
    </Style>

    <Style x:Key="AnimatedPage" TargetType="Page">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <!--  60FPS DesiredFrameRate="60"  -->
                        <Storyboard>
                            <ThicknessAnimation DecelerationRatio="0.9"
                                                Storyboard.TargetProperty="Margin"
                                                From="50,0,-50,0"
                                                To="0"
                                                Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonSwitch" TargetType="ToggleButton">
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Viewbox>
                        <Border x:Name="toggleBorder"
                                Width="40"
                                Height="24"
                                VerticalAlignment="Center"
                                attaches:CornerRadiusAttach.IsCircular="True"
                                Background="#D3D3D3"
                                BorderBrush="Transparent"
                                BorderThickness="0">
                            <Ellipse Name="ellipse"
                                     Width="18"
                                     Height="18"
                                     Margin="3"
                                     HorizontalAlignment="Left"
                                     Fill="White" />
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="toggleBorder" Property="Background" Value="#65C468" />
                            <Setter TargetName="ellipse" Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="#F0F0F0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleBorder" Property="Background" Value="#8FBC8F" />
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toggleBorder" Property="Background" Value="#BEBEBE" />
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CircularProgressBarBaseStyle" TargetType="controls:CircularProgressBar">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <!--<Setter Property="TextElement.Foreground" Value="{DynamicResource CommonControlsTextBoxText}"/>-->
        <Setter Property="Maximum" Value="100" />
        <Setter Property="Background" Value="#FFE6E6E6" />
        <!--<Setter Property="Background" Value="{DynamicResource ProgressBarBackground}"/>-->
        <Setter Property="BrushStrokeThickness" Value="8" />
        <Setter Property="StrokeThickness" Value="8" />
        <Setter Property="BorderBrush" Value="#FF1FA7FC" />
        <!--<Setter Property="BorderBrush" Value="{DynamicResource ProgressBarProgress}"/>-->
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CircularProgressBar">
                    <Viewbox>
                        <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Path Stroke="{TemplateBinding Background}" StrokeThickness="{TemplateBinding StrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment IsLargeArc="True"
                                                        Point="49.999127335374,7.61543361704753E-09"
                                                        Size="50,50"
                                                        SweepDirection="Clockwise" />
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BrushStrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment IsLargeArc="{Binding Path=Angle, Converter={StaticResource AngleToIsLargeConverter}, RelativeSource={RelativeSource AncestorType=ProgressBar}}"
                                                        Point="{Binding Path=Angle, Converter={StaticResource AngleToPointConverter}, RelativeSource={RelativeSource AncestorType=ProgressBar}}"
                                                        Size="50,50"
                                                        SweepDirection="Clockwise" />
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.Effect>
                                    <DropShadowEffect ShadowDepth="0" Color="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}" />
                                </Path.Effect>
                            </Path>
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <StackPanel.Resources>
                                        <Style x:Key="TextBlockCollapsedStyle" TargetType="TextBlock">
                                            <Style.Triggers>
                                                <Trigger Property="Text" Value="">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                                <Trigger Property="Text" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </StackPanel.Resources>
                                    <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type TextBlock}}" />
                                                <Setter Property="DynamicStyleProvider.Derived" Value="{DynamicResource TextBlockCollapsedStyle}" />
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                    <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Text="{Binding Path=Value, StringFormat={}{0}%, RelativeSource={RelativeSource TemplatedParent}}" />
                                </StackPanel>
                            </Grid>
                        </Canvas>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CircularProgressBarBaseStyle}" TargetType="controls:CircularProgressBar" />

    <Style x:Key="ListBoxItemContainerStyle" TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Opacity="0.7">
                        <Ellipse x:Name="ep"
                                 Width="12"
                                 Height="12"
                                 Cursor="Hand"
                                 Fill="LightGray" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ep" Property="Fill" Value="Gray" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RollBoxBaseStyle" TargetType="controls:RollBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:RollBox">
                    <Grid ClipToBounds="True">
                        <ListBox x:Name="PART_ListBox"
                                 Height="24"
                                 Margin="0,0,20,20"
                                 HorizontalAlignment="Right"
                                 VerticalAlignment="Bottom"
                                 Panel.ZIndex="10"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 ItemContainerStyle="{StaticResource ListBoxItemContainerStyle}"
                                 SelectedIndex="0">
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                        <ContentControl x:Name="PART_NEXT_Content" />
                        <ContentControl x:Name="PART_CURR_Content" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource RollBoxBaseStyle}" TargetType="controls:RollBox" />

    <!--  自动添加时内容居中  -->
    <Style x:Key="GridCellCenter" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonHover}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListBoxItemCheckBoxBaseStyle" TargetType="ListBoxItem">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Border"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <CheckBox Margin="0,2"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <CheckBox.Content>
                                <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                                    <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                                    <Binding Path="." />
                                </MultiBinding>
                            </CheckBox.Content>
                        </CheckBox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemMouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemMouseOverBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemMouseOverForeground}" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemSelectedActiveBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedActiveBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedActiveForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListBoxItemDisabledBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ListBoxItemDisabledBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource ListBoxItemDisabledForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemCheckBoxStyle" TargetType="ListBoxItem">
        <Setter Property="DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type ListBoxItem}}" />
        <Setter Property="DynamicStyleProvider.Derived" Value="{DynamicResource ListBoxItemCheckBoxBaseStyle}" />
    </Style>

    <DataTemplate x:Key="ListBoxItemCheckBoxDataTemplate">
        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}">
            <CheckBox.Content>
                <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                    <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                    <Binding Path="." />
                </MultiBinding>
            </CheckBox.Content>
        </CheckBox>
    </DataTemplate>

    <Style x:Key="CheckComboBoxBaseStyle" TargetType="controls:CheckComboBox">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CheckComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Style="{DynamicResource TitleWithTemplatedParent}" />
                        <Border Name="Border"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True" />
                        <TextBox Name="PART_TextBox"
                                 Grid.Column="1"
                                 Margin="1,1,0,1"
                                 Padding="{TemplateBinding Padding}"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Stretch"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 Background="Transparent"
                                 BorderBrush="Transparent"
                                 BorderThickness="0"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Text="{TemplateBinding SelectedText}"
                                 TextWrapping="{TemplateBinding TextWrapping}" />
                        <ToggleButton x:Name="DropDownButton"
                                      Grid.Column="2"
                                      Background="{DynamicResource CommonControlsComboBoxGlyphBackground}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      ClickMode="Release"
                                      Foreground="{DynamicResource CommonControlsComboBoxGlyph}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource ToolBarComboBoxTransparentButtonStyle}" />
                        <Popup Name="PART_Popup"
                               AllowsTransparency="True"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PlacementTarget="{Binding ElementName=Border}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               StaysOpen="False">
                            <theme:SystemDropShadowChrome Name="Shadow"
                                                          MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                          Color="Transparent">
                                <Border Background="{DynamicResource CommonControlsComboBoxListBackground}"
                                        BorderBrush="{DynamicResource CommonControlsComboBoxListBorder}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <StackPanel Orientation="Horizontal">
                                            <Button Name="PART_Invert">
                                                <DockPanel>
                                                    <CheckBox Focusable="False"
                                                              IsChecked="{x:Null}"
                                                              IsHitTestVisible="False" />
                                                    <TextBlock Name="invert" Margin="4,0,0,0">反选</TextBlock>
                                                </DockPanel>
                                            </Button>
                                            <Button Name="PART_SelectAll">
                                                <DockPanel>
                                                    <CheckBox Focusable="False"
                                                              IsChecked="True"
                                                              IsHitTestVisible="False" />
                                                    <TextBlock Name="selectAll" Margin="4,0,0,0">选择全部</TextBlock>
                                                </DockPanel>
                                            </Button>
                                            <Button Name="PART_DeSelectAll">
                                                <DockPanel>
                                                    <CheckBox Focusable="False"
                                                              IsChecked="False"
                                                              IsHitTestVisible="False" />
                                                    <TextBlock Name="deselectAll" Margin="4,0,0,0">取消全部</TextBlock>
                                                </DockPanel>
                                            </Button>
                                        </StackPanel>
                                        <ListBox x:Name="PART_ListBox"
                                                 Grid.Row="1"
                                                 BorderBrush="Transparent"
                                                 BorderThickness="0"
                                                 DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                 ItemContainerStyle="{DynamicResource ListBoxItemCheckBoxStyle}"
                                                 ItemsSource="{TemplateBinding ItemsSource}"
                                                 SelectionMode="Multiple"
                                                 VirtualizingPanel.ScrollUnit="{Binding Path=(VirtualizingPanel.ScrollUnit), RelativeSource={RelativeSource TemplatedParent}}" />
                                        <!--
                                            VirtualizingPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing),RelativeSource={RelativeSource TemplatedParent}}"
                                            VirtualizingPanel.IsVirtualizingWhenGrouping="{Binding Path=(VirtualizingPanel.IsVirtualizingWhenGrouping),RelativeSource={RelativeSource TemplatedParent}}"
                                            VirtualizingPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode),RelativeSource={RelativeSource TemplatedParent}}"
                                            VirtualizingPanel.CacheLength="{Binding Path=(VirtualizingPanel.CacheLength),RelativeSource={RelativeSource TemplatedParent}}"
                                            VirtualizingPanel.CacheLengthUnit="{Binding Path=(VirtualizingPanel.CacheLengthUnit),RelativeSource={RelativeSource TemplatedParent}}"
                                            VirtualizingPanel.IsContainerVirtualizable="{Binding Path=(VirtualizingPanel.IsContainerVirtualizable),RelativeSource={RelativeSource TemplatedParent}}"
                                        -->
                                        <!--  ItemContainerStyle="{StaticResource ListBoxItemCheckBoxStyle}"  -->
                                        <!--  ItemTemplate="{StaticResource ListBoxItemCheckBoxDataTemplate}"  -->
                                    </Grid>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundHover}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphHover}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundFocused}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphFocused}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundFocused}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextFocused}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundDisabled}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderDisabled}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextDisabled}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundPressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextPressed}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="SnapsToDevicePixels" Value="True" />
                            <Setter TargetName="Shadow" Property="Color" Value="{DynamicResource ControlShadow}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Shadow" Property="MinHeight" Value="95" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="controls:CheckComboBox">
        <Setter Property="DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type ComboBox}}" />
        <Setter Property="DynamicStyleProvider.Derived" Value="{DynamicResource CheckComboBoxBaseStyle}" />
    </Style>

    <Style x:Key="VerticalSeparator" TargetType="Separator">
        <Setter Property="Separator.LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <!--<TransformGroup.Children>
                                    <TransformCollection>-->
                    <RotateTransform Angle="90" />
                    <!--</TransformCollection>
                                </TransformGroup.Children>-->
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextColumnEditingElement"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="TextBox">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="ComboBoxColumnEditingElement"
           BasedOn="{StaticResource {x:Type ComboBox}}"
           TargetType="ComboBox">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="TextBlockPassword"
           BasedOn="{StaticResource {x:Type TextBlock}}"
           TargetType="{x:Type TextBlock}">
        <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Text, Converter={StaticResource TextBlockPasswordConverter}}"/>-->
        <Setter Property="TextDecorations">
            <Setter.Value>
                <TextDecorationCollection>
                    <TextDecoration>
                        <TextDecoration.Pen>
                            <Pen Brush="Gray"
                                 DashCap="Round"
                                 EndLineCap="Round"
                                 StartLineCap="Round"
                                 Thickness="12">
                                <Pen.DashStyle>
                                    <DashStyle Dashes="0.0,1.2" Offset="0.6" />
                                </Pen.DashStyle>
                            </Pen>
                        </TextDecoration.Pen>
                        <TextDecoration.Location>
                            <TextDecorationLocation>Strikethrough</TextDecorationLocation>
                        </TextDecoration.Location>
                    </TextDecoration>
                </TextDecorationCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Transparent" />
    </Style>

    <Style x:Key="GifImageBaseStyle" TargetType="controls:GifImage">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:GifImage">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <Border.Background>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Image x:Name="PART_Image"
                                           Margin="{TemplateBinding Padding}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Stretch="{TemplateBinding Stretch}" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GifImageBaseStyle}" TargetType="controls:GifImage" />

</ResourceDictionary>