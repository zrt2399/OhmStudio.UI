<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attaches="clr-namespace:OhmStudio.UI.Attaches"
                    xmlns:controls="clr-namespace:OhmStudio.UI.Controls"
                    xmlns:converters="clr-namespace:OhmStudio.UI.Converters"
                    xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <ResourceDictionary.MergedDictionaries>
        <!--  Common Control Styles  -->
        <ResourceDictionary Source="pack://application:,,,/OhmStudio.UI;Component/Styles/VS/Base/ControlsBase.xaml" />
        <!--  TextBox Attach Styles  -->
        <ResourceDictionary Source="pack://application:,,,/OhmStudio.UI;Component/Styles/Custom/TextBoxAttach.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="InputElementPadding">2</Thickness>
    <Thickness x:Key="InputElementBorderThickness">1</Thickness>

    <Thickness x:Key="ComboBoxItemPadding">1</Thickness>
    <Thickness x:Key="ComboBoxItemMargin">2,0</Thickness>

    <Thickness x:Key="ListBoxItemPadding">2,0</Thickness>
    <Thickness x:Key="ListBoxItemMargin">0</Thickness>

    <Thickness x:Key="ListViewItemPadding">4,2</Thickness>
    <Thickness x:Key="ListViewItemMargin">0,0,0,1</Thickness>

    <FontFamily x:Key="AliIconfont">/OhmStudio.UI;component/Fonts/#iconfont</FontFamily>

    <converters:VisibilityToBoolConverter x:Key="VisibilityToBoolConverter" />
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <converters:BoolToCollapsedConverter x:Key="BoolToCollapsedConverter" />
    <converters:BrushToColorConverter x:Key="BrushToColorConverter" />
    <converters:AngleToPointConverter x:Key="AngleToPointConverter" />
    <converters:AngleToIsLargeConverter x:Key="AngleToIsLargeConverter" />
    <converters:NotNullOrEmptyToBoolConverter x:Key="NotNullOrEmptyToBoolConverter" />
    <converters:NotNullOrEmptyToVisibilityConverter x:Key="NotNullOrEmptyToVisibilityConverter" />
    <converters:FlipToScaleXValueConverter x:Key="FlipToScaleXValueConverter" />
    <converters:FlipToScaleYValueConverter x:Key="FlipToScaleYValueConverter" />
    <converters:CircleProgressBarMarginConverter x:Key="CircleProgressBarMarginConverter" />
    <converters:PathPickerPlaceHolderMarginConverter x:Key="PathPickerPlaceHolderMarginConverter" />
    <converters:StepItemEllipseItemConverter x:Key="StepItemEllipseItemConverter" />
    <converters:DoNoThingConverter x:Key="DoNoThingConverter" />
    <converters:ParallelogramEllipseConverter x:Key="ParallelogramEllipseConverter" />

    <Style x:Key="ContentHostControl" TargetType="Control">
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="CustomControlBase" TargetType="Control">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="{DynamicResource InputElementPadding}" />
        <Setter Property="BorderThickness" Value="{DynamicResource InputElementBorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxText}" />
        <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorder}" />
    </Style>

    <Geometry x:Key="LeftGeometry" o:Freeze="True">M394.24 512L683.52 248.32c10.24-10.24 10.24-25.6 0-35.84-10.24-10.24-25.6-10.24-35.84 0l-307.2 279.04c-5.12 5.12-7.68 12.8-7.68 20.48 0 7.68 2.56 15.36 7.68 20.48l307.2 279.04c10.24 10.24 25.6 10.24 35.84 0 10.24-10.24 10.24-25.6 0-35.84L394.24 512z</Geometry>
    <Geometry x:Key="RightGeometry" o:Freeze="True">M4.1666641,0 C5.2083321,0 6.25,0.41666794 7.0833321,1.25 L57.083331,46.666664 C57.916664,47.499998 58.33333,48.749998 58.333329,49.999998 58.33333,51.249997 57.916664,52.499997 57.083331,53.333331 L7.0833321,98.749996 C5.4166641,100.41666 2.9166641,100.41666 1.2499962,98.749996 -0.41666794,97.083328 -0.41666794,94.583328 1.2499962,92.916664 L48.333331,49.999998 1.2499962,7.0833321 C-0.41666794,5.4166641 -0.41666794,2.9166641 1.2499962,1.25 2.0833282,0.41666794 3.1249962,0 4.1666641,0 z</Geometry>
    <Style x:Key="PathBaseStyle" TargetType="Path">
        <Setter Property="Margin" Value="16" />
        <Setter Property="Fill" Value="White" />
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
    </Style>
    <Style x:Key="LeftPathStyle"
           BasedOn="{StaticResource PathBaseStyle}"
           TargetType="Path">
        <Setter Property="Data" Value="{StaticResource LeftGeometry}" />
    </Style>
    <Style x:Key="RightPathStyle"
           BasedOn="{StaticResource PathBaseStyle}"
           TargetType="Path">
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform ScaleX="-1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="0" />
                    <TranslateTransform />
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="Data" Value="{StaticResource LeftGeometry}" />
    </Style>

    <Style x:Key="PathCustomButton" TargetType="Button">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Margin" Value="30" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="#AA2E2E2E" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4"
                            SnapsToDevicePixels="true">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightMenuButton"
           BasedOn="{StaticResource PathCustomButton}"
           TargetType="Button">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="TextBlockBaseStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="TextBlock" />

    <Style x:Key="DropShadowControlBaseStyle" TargetType="controls:DropShadowControl">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:DropShadowControl">
                    <controls:SimplePanel>
                        <Border Name="ShadowBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="{Binding BlurRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Direction="{Binding ShadowDirection, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Opacity="{Binding ShadowOpacity, RelativeSource={RelativeSource TemplatedParent}}"
                                                  RenderingBias="{Binding RenderingBias, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ShadowDepth="{Binding ShadowDepth, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Color="{Binding ShadowColor, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </controls:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsShowShadow" Value="False">
                            <Setter TargetName="ShadowBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DropShadowControlBaseStyle}" TargetType="controls:DropShadowControl" />

    <Style x:Key="ClassicButton" TargetType="Button">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="#FFE1E1E1" />
        <Setter Property="BorderBrush" Value="#FFC1C1C1" />
        <Setter Property="Padding" Value="{DynamicResource InputElementPadding}" />
        <Setter Property="BorderThickness" Value="{DynamicResource InputElementBorderThickness}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="attaches:ButtonAttach.PressedBackground" Value="#FFCCE4E7" />
        <Setter Property="attaches:ButtonAttach.PressedBorderBrush" Value="#FFC1C1C1" />
        <!--<Setter Property="BorderAttach.CornerRadius" Value="2" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:DropShadowControl x:Name="DropShadowControl"
                                                Background="{TemplateBinding Background}"
                                                BlurRadius="8"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                                IsShowShadow="False"
                                                ShadowColor="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}"
                                                ShadowDepth="0">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </controls:DropShadowControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DropShadowControl" Property="IsShowShadow" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="DropShadowControl" Property="IsShowShadow" Value="True" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding Path=(attaches:ButtonAttach.PressedBackground), RelativeSource={RelativeSource Mode=Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=(attaches:ButtonAttach.PressedBorderBrush), RelativeSource={RelativeSource Mode=Self}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFCCCCCC" />
                            <Setter Property="BorderBrush" Value="#FFBFBFBF" />
                            <Setter Property="Foreground" Value="#FF838383" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClassicButtonBlue"
           BasedOn="{StaticResource ClassicButton}"
           TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#FF499FEF" />
        <Setter Property="BorderBrush" Value="#FF2C84DD" />
        <Setter Property="attaches:ButtonAttach.PressedBackground" Value="Black" />
        <Setter Property="attaches:ButtonAttach.PressedBorderBrush" Value="Black" />
    </Style>

    <Style x:Key="ClassicButtonGreen"
           BasedOn="{StaticResource ClassicButtonBlue}"
           TargetType="Button">
        <Setter Property="Background" Value="#FF1EA973" />
        <Setter Property="BorderBrush" Value="#FF1EA973" />

    </Style>

    <Style x:Key="ClassicButtonRed"
           BasedOn="{StaticResource ClassicButtonBlue}"
           TargetType="Button">
        <Setter Property="Background" Value="IndianRed" />
        <Setter Property="BorderBrush" Value="IndianRed" />
    </Style>

    <Style x:Key="Win10Button"
           BasedOn="{StaticResource ClassicButton}"
           TargetType="Button">
        <Setter Property="BorderBrush" Value="#FFADADAD" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <controls:DropShadowControl Background="{TemplateBinding Background}"
                                                BlurRadius="4"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                                ShadowColor="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}"
                                                ShadowDepth="0">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </controls:DropShadowControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFE5F1FB" />
                            <Setter Property="BorderBrush" Value="#FF0078D7" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="#FFE1E1E1" />
                            <Setter Property="BorderBrush" Value="#FF0078D7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#FFCCE4F7" />
                            <Setter Property="BorderBrush" Value="#FF005499" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFCCCCCC" />
                            <Setter Property="BorderBrush" Value="#FFBFBFBF" />
                            <Setter Property="Foreground" Value="#FF838383" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomTabItem" TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <StackPanel ClipToBounds="True">
                        <ContentPresenter Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                          ContentSource="Header"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Name="bottom"
                                Height="3"
                                Background="#FF3C6EFF"
                                Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#FF5B7C92" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="bottom" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="#FF4B9FD8" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchBarBaseStyle"
           BasedOn="{StaticResource CustomControlBase}"
           TargetType="controls:SearchBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:SearchBar">
                    <DockPanel>
                        <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox Name="PART_TextBox"
                                         attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type TextBox}}"
                                         attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                         Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                         TextWrapping="{TemplateBinding TextWrapping}">
                                    <TextBox.InputBindings>
                                        <KeyBinding Key="Return"
                                                    Command="{Binding Command, RelativeSource={RelativeSource TemplatedParent}}"
                                                    CommandParameter="{Binding CommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                                    CommandTarget="{Binding CommandTarget, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                                </TextBox>
                                <ContentControl Style="{StaticResource PlaceHolderWithTemplatedParent}" />
                                <Button Grid.Column="1"
                                        Command="{TemplateBinding Command}"
                                        CommandParameter="{TemplateBinding CommandParameter}"
                                        CommandTarget="{TemplateBinding CommandTarget}"
                                        Style="{StaticResource RightMenuButton}">
                                    <TextBlock Name="Search"
                                               FontFamily="{StaticResource AliIconfont}"
                                               ToolTip="{x:Null}">
                                        &#xe60f;
                                    </TextBlock>
                                </Button>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                            <Setter TargetName="Search" Property="Foreground" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="controls:SearchBar" />

    <Style x:Key="AnimatedPage" TargetType="Page">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <!--  60FPS DesiredFrameRate="60"  -->
                        <Storyboard>
                            <ThicknessAnimation DecelerationRatio="0.9"
                                                Storyboard.TargetProperty="Margin"
                                                From="50,0,-50,0"
                                                To="0"
                                                Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonSwitch" TargetType="ToggleButton">
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="#D3D3D3" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Viewbox>
                        <Border Width="40"
                                Height="24"
                                VerticalAlignment="Center"
                                attaches:CornerRadiusAttach.IsCircular="True"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Ellipse Name="ellipse"
                                     Width="18"
                                     Height="18"
                                     Margin="3"
                                     HorizontalAlignment="Left"
                                     Fill="White" />
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#65C468" />
                            <Setter TargetName="ellipse" Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="#F0F0F0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#8FBC8F" />
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#BEBEBE" />
                            <Setter TargetName="ellipse" Property="Fill" Value="LightGray" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CircleProgressBarBaseStyle" TargetType="controls:CircleProgressBar">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <!--<Setter Property="TextElement.Foreground" Value="{DynamicResource CommonControlsTextBoxText}"/>-->
        <Setter Property="Maximum" Value="100" />
        <Setter Property="Background" Value="#FFE6E6E6" />
        <!--<Setter Property="Background" Value="{DynamicResource ProgressBarBackground}"/>-->
        <Setter Property="BrushStrokeThickness" Value="8" />
        <Setter Property="StrokeThickness" Value="8" />
        <Setter Property="BorderBrush" Value="#FF1FA7FC" />
        <!--<Setter Property="BorderBrush" Value="{DynamicResource ProgressBarProgress}"/>-->
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CircleProgressBar">
                    <Viewbox>
                        <Viewbox.Margin>
                            <MultiBinding Converter="{StaticResource CircleProgressBarMarginConverter}">
                                <Binding Path="BrushStrokeThickness" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="StrokeThickness" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </Viewbox.Margin>
                        <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Path Stroke="{TemplateBinding Background}" StrokeThickness="{TemplateBinding StrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment IsLargeArc="True"
                                                        Point="49.999127335374,7.61543361704753E-09"
                                                        Size="50,50"
                                                        SweepDirection="Clockwise" />
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BrushStrokeThickness}">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="50,0">
                                            <ArcSegment IsLargeArc="{Binding Path=Angle, Converter={StaticResource AngleToIsLargeConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Point="{Binding Path=Angle, Converter={StaticResource AngleToPointConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Size="50,50"
                                                        SweepDirection="Clockwise" />
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.Effect>
                                    <DropShadowEffect ShadowDepth="0" Color="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BrushToColorConverter}}" />
                                </Path.Effect>
                            </Path>
                            <controls:SimplePanel Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               Text="{Binding Title, RelativeSource={RelativeSource TemplatedParent}}"
                                               Visibility="{Binding Title, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NotNullOrEmptyToVisibilityConverter}}" />
                                    <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Text="{Binding Path=Value, StringFormat={}{0}%, RelativeSource={RelativeSource TemplatedParent}}" />
                                </StackPanel>
                            </controls:SimplePanel>
                        </Canvas>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CircleProgressBarBaseStyle}" TargetType="controls:CircleProgressBar" />

    <Style x:Key="ListBoxItemContainerStyle" TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="bd"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Opacity="0.5">
                        <Ellipse x:Name="ep"
                                 Width="12"
                                 Height="12"
                                 Cursor="Hand"
                                 Fill="LightGray" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ep" Property="Fill" Value="Gray" />
                            <Setter TargetName="bd" Property="Opacity" Value="0.8" />
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ep" Property="Fill" Value="Red" />
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RollBoxBaseStyle" TargetType="controls:RollBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:RollBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <controls:SimplePanel>
                            <ListBox x:Name="PART_ListBox"
                                     Margin="20"
                                     HorizontalAlignment="Right"
                                     VerticalAlignment="Bottom"
                                     Panel.ZIndex="10"
                                     Background="Transparent"
                                     BorderThickness="0"
                                     ItemContainerStyle="{StaticResource ListBoxItemContainerStyle}"
                                     ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                     ScrollViewer.VerticalScrollBarVisibility="Disabled">
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                            </ListBox>
                            <!--<ContentControl x:Name="PART_NEXT_Content" />-->
                            <ContentControl x:Name="PART_CURR_Content" />
                            <Button x:Name="PART_PreviousButton"
                                    HorizontalAlignment="Left"
                                    Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PreviousCommand}"
                                    Style="{StaticResource PathCustomButton}">
                                <Path Style="{StaticResource LeftPathStyle}" />
                            </Button>
                            <Button HorizontalAlignment="Right"
                                    Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NextCommand}"
                                    Style="{StaticResource PathCustomButton}">
                                <Path Style="{StaticResource RightPathStyle}" />
                            </Button>
                        </controls:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource RollBoxBaseStyle}" TargetType="controls:RollBox" />

    <!--  自动添加时内容居中  -->
    <Style x:Key="GridCellCenter" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource CommonControlsButtonHover}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListBoxItemCheckBoxStyle" TargetType="ListBoxItem">
        <Setter Property="DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type ListBoxItem}}" />
        <Setter Property="DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="IsTabStop" Value="False" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <CheckBox Margin="0,2"
                                              Foreground="{TemplateBinding Foreground}"
                                              IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        <!--<CheckBox.Content>
                                            <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                                                <Binding Path="." />
                                                <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                                            </MultiBinding>
                                        </CheckBox.Content>-->
                                    </CheckBox>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource ListBoxItemMouseOverBackground}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource ListBoxItemMouseOverBorder}" />
                                        <Setter Property="Foreground" Value="{DynamicResource ListBoxItemMouseOverForeground}" />
                                    </MultiTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource ListBoxItemSelectedActiveBackground}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedActiveBorder}" />
                                        <Setter Property="Foreground" Value="{DynamicResource ListBoxItemSelectedActiveForeground}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ListBoxItemDisabledBackground}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource ListBoxItemDisabledBorder}" />
                                        <Setter Property="Foreground" Value="{DynamicResource ListBoxItemDisabledForeground}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="ListBoxItemCheckBoxDataTemplate">
        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}">
            <CheckBox.Content>
                <MultiBinding Converter="{StaticResource DisplayMemberPathConverter}">
                    <Binding Path="." />
                    <Binding Path="DisplayMemberPath" RelativeSource="{RelativeSource AncestorType=ListBox}" />
                </MultiBinding>
            </CheckBox.Content>
        </CheckBox>
    </DataTemplate>

    <Style x:Key="CheckComboBoxBaseStyle"
           BasedOn="{StaticResource {x:Type ComboBox}}"
           TargetType="controls:CheckComboBox">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CheckComboBox">
                    <DockPanel>
                        <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border Name="Border"
                                    Grid.ColumnSpan="2"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    SnapsToDevicePixels="True" />
                            <TextBox Name="PART_TextBox"
                                     Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ComboBoxHostMarginConverter}}"
                                     attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type TextBox}}"
                                     attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Text="{TemplateBinding SelectedText}"
                                     TextWrapping="{TemplateBinding TextWrapping}" />
                            <ToggleButton x:Name="DropDownButton"
                                          Grid.Column="1"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{DynamicResource ToolBarComboBoxTransparentButtonStyle}" />
                            <Popup Name="PART_Popup"
                                   AllowsTransparency="True"
                                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   PlacementTarget="{Binding ElementName=Border}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   StaysOpen="False">
                                <theme:SystemDropShadowChrome Name="Shadow"
                                                              MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                              MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                              Color="Transparent">
                                    <Border Background="{DynamicResource CommonControlsComboBoxListBackground}"
                                            BorderBrush="{DynamicResource CommonControlsComboBoxListBorder}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <StackPanel Orientation="Horizontal">
                                                <StackPanel.Resources>
                                                    <Style BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="CheckBox">
                                                        <Setter Property="IsHitTestVisible" Value="False" />
                                                        <Setter Property="Focusable" Value="False" />
                                                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                                                    </Style>
                                                </StackPanel.Resources>
                                                <Button Command="{Binding InvertSelectionCommand, RelativeSource={RelativeSource TemplatedParent}}">
                                                    <CheckBox IsChecked="{x:Null}">反选</CheckBox>
                                                </Button>
                                                <Button Command="{Binding SelectAllCommand, RelativeSource={RelativeSource TemplatedParent}}">
                                                    <CheckBox IsChecked="True">选择全部</CheckBox>
                                                </Button>
                                                <Button Command="{Binding UnselectAllCommand, RelativeSource={RelativeSource TemplatedParent}}">
                                                    <CheckBox IsChecked="False">取消全部</CheckBox>
                                                </Button>
                                            </StackPanel>
                                            <ListBox x:Name="PART_ListBox"
                                                     Grid.Row="1"
                                                     BorderBrush="Transparent"
                                                     BorderThickness="0"
                                                     DisplayMemberPath="{Binding DisplayMemberPath, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ItemContainerStyle="{DynamicResource ListBoxItemCheckBoxStyle}"
                                                     ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                                     SelectedIndex="{Binding SelectedIndex, RelativeSource={RelativeSource TemplatedParent}}"
                                                     SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}"
                                                     SelectionMode="Multiple"
                                                     VirtualizingPanel.CacheLength="{Binding Path=(VirtualizingPanel.CacheLength), RelativeSource={RelativeSource TemplatedParent}}"
                                                     VirtualizingPanel.CacheLengthUnit="{Binding Path=(VirtualizingPanel.CacheLengthUnit), RelativeSource={RelativeSource TemplatedParent}}"
                                                     VirtualizingPanel.IsContainerVirtualizable="{Binding Path=(VirtualizingPanel.IsContainerVirtualizable), RelativeSource={RelativeSource TemplatedParent}}"
                                                     VirtualizingPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing), RelativeSource={RelativeSource TemplatedParent}}"
                                                     VirtualizingPanel.IsVirtualizingWhenGrouping="{Binding Path=(VirtualizingPanel.IsVirtualizingWhenGrouping), RelativeSource={RelativeSource TemplatedParent}}"
                                                     VirtualizingPanel.ScrollUnit="{Binding Path=(VirtualizingPanel.ScrollUnit), RelativeSource={RelativeSource TemplatedParent}}" />

                                            <!--
                                                VirtualizingPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode),RelativeSource={RelativeSource TemplatedParent}}"
                                            -->
                                            <!--  ItemContainerStyle="{DynamicResource ListBoxItemCheckBoxStyle}"  -->
                                            <!--  ItemTemplate="{StaticResource ListBoxItemCheckBoxDataTemplate}"  -->
                                        </Grid>
                                    </Border>
                                </theme:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundHover}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphHover}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderHover}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextHover}" />-->
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundFocused}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphFocused}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundFocused}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderFocused}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextFocused}" />-->
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource CommonControlsComboBoxGlyphBackgroundDisabled}" />
                            <Setter TargetName="DropDownButton" Property="Foreground" Value="{DynamicResource CommonControlsComboBoxGlyphDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderDisabled}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextDisabled}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsComboBoxBackgroundPressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsComboBoxBorderPressed}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsComboBoxTextPressed}" />-->
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shadow" Property="SnapsToDevicePixels" Value="True" />
                            <Setter TargetName="Shadow" Property="Color" Value="{DynamicResource ControlShadow}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Shadow" Property="MinHeight" Value="95" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="controls:CheckComboBox" />

    <Style x:Key="VerticalSeparator"
           BasedOn="{StaticResource {x:Type Separator}}"
           TargetType="Separator">
        <Setter Property="Separator.LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <!--<TransformGroup.Children>
                                    <TransformCollection>-->
                    <RotateTransform Angle="90" />
                    <!--</TransformCollection>
                                </TransformGroup.Children>-->
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextColumnEditingElement" TargetType="TextBox">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type TextBox}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Padding" Value="0" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxColumnElement" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="ComboBoxColumnEditingElement" TargetType="ComboBox">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type ComboBox}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="ComboBox">
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Padding" Value="0" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxColumnElement" TargetType="CheckBox">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type CheckBox}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="CheckBox">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="IsHitTestVisible" Value="False" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxColumnEditingElement" TargetType="CheckBox">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type CheckBox}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="CheckBox">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockPassword" TargetType="{x:Type TextBlock}">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type TextBlock}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="TextBlock">
                    <Setter Property="TextDecorations">
                        <Setter.Value>
                            <TextDecorationCollection>
                                <TextDecoration>
                                    <TextDecoration.Pen>
                                        <Pen Brush="Gray"
                                             DashCap="Round"
                                             EndLineCap="Round"
                                             StartLineCap="Round"
                                             Thickness="12">
                                            <Pen.DashStyle>
                                                <DashStyle Dashes="0.0,1.2" Offset="0.6" />
                                            </Pen.DashStyle>
                                        </Pen>
                                    </TextDecoration.Pen>
                                    <TextDecoration.Location>
                                        <TextDecorationLocation>Strikethrough</TextDecorationLocation>
                                    </TextDecoration.Location>
                                </TextDecoration>
                            </TextDecorationCollection>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Foreground" Value="Transparent" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentTextBox" TargetType="TextBox">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type TextBox}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="IsReadOnly" Value="True" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GifImageBaseStyle" TargetType="controls:GifImage">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:GifImage">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <Border.Background>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Image x:Name="PART_Image"
                                           Margin="{TemplateBinding Padding}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Stretch="{TemplateBinding Stretch}" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource GifImageBaseStyle}" TargetType="controls:GifImage" />

    <Style x:Key="PasswordTextBoxBaseStyle"
           BasedOn="{StaticResource CustomControlBase}"
           TargetType="controls:PasswordTextBox">
        <Style.Resources>
            <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Foreground" Value="#FFABADB3" />
                <Setter Property="Margin" Value="0,0,3,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="CheckBox">
                            <TextBlock Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource AliIconfont}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                       ToolTip="{x:Null}" />
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="0.7" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value="0.5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PasswordTextBox">
                    <DockPanel>
                        <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox x:Name="PART_TextBox"
                                         attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type TextBox}}"
                                         attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                         Text="{Binding Password, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         Visibility="{TemplateBinding TbVisibility}" />
                                <PasswordBox x:Name="PART_PasswordBox"
                                             attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type PasswordBox}}"
                                             attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                             attaches:PasswordBoxAttach.Password="{Binding Password, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             attaches:PasswordBoxAttach.PasswordAttach="True"
                                             PasswordChar="{TemplateBinding PasswordChar}"
                                             Visibility="{TemplateBinding PwVisibility}" />
                                <ContentControl Style="{StaticResource PlaceHolderWithTemplatedParent}" />
                                <CheckBox Grid.Column="1"
                                          Content="&#xe603;"
                                          IsChecked="{Binding IsCleared, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsTabStop="{Binding ClearButtonIsTabStop, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource CheckBoxStyle}"
                                          ToolTip="清除"
                                          Visibility="{TemplateBinding ClearVisibility}" />
                                <controls:SimplePanel Grid.Column="2" Visibility="{Binding CanShowPassword, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <CheckBox Content="&#xe6f9;"
                                              IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}"
                                              IsTabStop="{Binding ShowPasswordButtonIsTabStop, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource CheckBoxStyle}"
                                              ToolTip="点击隐藏密码"
                                              Visibility="{Binding ElementName=PART_TextBox, Path=Visibility}" />
                                    <CheckBox Content="&#xe6fb;"
                                              IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}"
                                              IsTabStop="{Binding ShowPasswordButtonIsTabStop, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource CheckBoxStyle}"
                                              ToolTip="点击显示密码"
                                              Visibility="{Binding ElementName=PART_PasswordBox, Path=Visibility}" />
                                </controls:SimplePanel>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource PasswordTextBoxBaseStyle}" TargetType="controls:PasswordTextBox" />

    <Style x:Key="DateTimePickerBaseStyle"
           BasedOn="{StaticResource CustomControlBase}"
           TargetType="controls:DateTimePicker">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:DateTimePicker">
                    <DockPanel>
                        <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox Name="PART_TextBox"
                                         attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type TextBox}}"
                                         attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                         IsReadOnly="{TemplateBinding IsReadOnly}"
                                         Text="{Binding DateTimeText, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
                                <ContentControl Style="{StaticResource PlaceHolderWithTemplatedParent}" />

                                <Button Grid.Column="1"
                                        Command="{Binding CalendarClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource RightMenuButton}">
                                    <TextBlock Name="Calendar"
                                               FontFamily="{StaticResource AliIconfont}"
                                               ToolTip="{x:Null}">
                                        &#xe606;
                                    </TextBlock>
                                </Button>
                                <Popup x:Name="PART_Popup"
                                       AllowsTransparency="True"
                                       IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       PlacementTarget="{Binding ElementName=Border}"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                       StaysOpen="False">
                                    <controls:SystemDropShadowChrome Margin="0,0,5,5" Color="{DynamicResource ControlShadow}" />
                                </Popup>
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                            <Setter TargetName="Calendar" Property="Foreground" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="controls:DateTimePicker" />

    <Style x:Key="PropertyGridBaseStyle" TargetType="controls:PropertyGrid">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PropertyGrid">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsControl Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.CacheLength="{Binding Path=(VirtualizingPanel.CacheLength), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.CacheLengthUnit="{Binding Path=(VirtualizingPanel.CacheLengthUnit), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.IsContainerVirtualizable="{Binding Path=(VirtualizingPanel.IsContainerVirtualizable), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.IsVirtualizingWhenGrouping="{Binding Path=(VirtualizingPanel.IsVirtualizingWhenGrouping), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.ScrollUnit="{Binding Path=(VirtualizingPanel.ScrollUnit), RelativeSource={RelativeSource TemplatedParent}}"
                                      VirtualizingPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode), RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsControl.Template>
                                <ControlTemplate TargetType="ItemsControl">
                                    <ScrollViewer HorizontalScrollBarVisibility="{Binding HorizontalScrollBarVisibility, RelativeSource={RelativeSource AncestorType=controls:PropertyGrid}}" VerticalScrollBarVisibility="{Binding VerticalScrollBarVisibility, RelativeSource={RelativeSource AncestorType=controls:PropertyGrid}}">
                                        <StackPanel IsItemsHost="True" ScrollViewer.CanContentScroll="True" />
                                    </ScrollViewer>
                                </ControlTemplate>
                            </ItemsControl.Template>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource PropertyGridBaseStyle}" TargetType="controls:PropertyGrid" />

    <Style x:Key="IconButtonBaseStyle" TargetType="controls:IconButton">
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:IconButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Image Margin="{TemplateBinding Padding}"
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Source="{TemplateBinding Icon}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource IconButtonBaseStyle}" TargetType="controls:IconButton" />

    <Style x:Key="CollapseButton" TargetType="Button">
        <Setter Property="attaches:DynamicStyleProvider.BasedOn" Value="{DynamicResource {x:Type Button}}" />
        <Setter Property="attaches:DynamicStyleProvider.Derived">
            <Setter.Value>
                <Style TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PathPickerBaseStyle" TargetType="controls:PathPicker">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PathPicker">
                    <Border Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid attaches:GridAttach.ColumnDefinitions="*,Auto,Auto,Auto">
                            <DockPanel>
                                <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                                <controls:SimplePanel>
                                    <TextBox Name="PART_TextBox"
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                             IsReadOnly="{TemplateBinding IsReadOnly}"
                                             Text="{TemplateBinding FileName}"
                                             TextWrapping="{TemplateBinding TextWrapping}" />
                                    <ContentControl Style="{StaticResource PlaceHolderWithTemplatedParent}">
                                        <ContentControl.Margin>
                                            <MultiBinding Converter="{StaticResource PathPickerPlaceHolderMarginConverter}">
                                                <Binding ElementName="PART_TextBox" Path="BorderThickness" />
                                                <Binding ElementName="PART_TextBox" Path="Padding" />
                                            </MultiBinding>
                                        </ContentControl.Margin>
                                    </ContentControl>
                                </controls:SimplePanel>
                            </DockPanel>
                            <Button Grid.Column="1"
                                    Margin="{TemplateBinding Spacing}"
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=OpenCommand}"
                                    Content="{TemplateBinding OpenButtonContent}"
                                    IsEnabled="{Binding ElementName=PART_TextBox, Path=Text, Converter={StaticResource NotNullOrEmptyToBoolConverter}}"
                                    Style="{DynamicResource CollapseButton}"
                                    ToolTip="{TemplateBinding OpenButtonToolTip}" />
                            <Button Grid.Column="2"
                                    Margin="{TemplateBinding Spacing}"
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ExploreCommand}"
                                    Content="{TemplateBinding ExploreButtonContent}"
                                    IsEnabled="{Binding ElementName=PART_TextBox, Path=Text, Converter={StaticResource NotNullOrEmptyToBoolConverter}}"
                                    Style="{DynamicResource CollapseButton}"
                                    ToolTip="{TemplateBinding ExploreButtonToolTip}" />
                            <Button Grid.Column="3"
                                    Margin="{TemplateBinding Spacing}"
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BrowseCommand}"
                                    Content="{TemplateBinding BrowseButtonContent}"
                                    Style="{DynamicResource CollapseButton}"
                                    ToolTip="{TemplateBinding BrowseButtonToolTip}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource PathPickerBaseStyle}" TargetType="controls:PathPicker" />

    <Style x:Key="LoadingBaseStyle" TargetType="controls:LoadingBase">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="DotDiameter" Value="10" />
        <Setter Property="Foreground" Value="{DynamicResource ProgressBarProgress}" />
    </Style>
    <Style x:Key="LoadingCircleBaseStyle"
           BasedOn="{StaticResource LoadingBaseStyle}"
           TargetType="controls:LoadingCircle">
        <Setter Property="Height" Value="20" />
        <Setter Property="Width" Value="20" />
        <Setter Property="DotDiameter" Value="5" />
        <Setter Property="DotInterval" Value="30" />
        <Setter Property="DotOffSet" Value="60" />
        <Setter Property="DotDelayTime" Value="90" />
        <Setter Property="DotSpeed" Value="4" />
    </Style>
    <Style x:Key="LoadingLineBaseStyle"
           BasedOn="{StaticResource LoadingBaseStyle}"
           TargetType="controls:LoadingLine">
        <Setter Property="DotDiameter" Value="5" />
    </Style>
    <Style BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="controls:LoadingCircle" />
    <Style BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="controls:LoadingLine" />

    <Style x:Key="PackIconBaseStyle" TargetType="controls:PackIcon">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PackIcon">
                    <Border Margin="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Viewbox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FlowDirection="{TemplateBinding FlowDirection}">
                            <Path Height="{Binding RelativeSource={RelativeSource AncestorType=Viewbox}, Path=Height}"
                                  Data="{Binding Data, RelativeSource={RelativeSource TemplatedParent}}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Uniform">
                                <Path.LayoutTransform>
                                    <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Flip, Mode=OneWay, Converter={StaticResource FlipToScaleXValueConverter}}" ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Flip, Mode=OneWay, Converter={StaticResource FlipToScaleYValueConverter}}" />
                                </Path.LayoutTransform>
                            </Path>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource PackIconBaseStyle}" TargetType="controls:PackIcon" />

    <Style x:Key="NumericUpDownBaseStyle"
           BasedOn="{StaticResource CustomControlBase}"
           TargetType="controls:NumericUpDown">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:NumericUpDown">
                    <DockPanel>
                        <ContentControl Style="{StaticResource TitleWithTemplatedParent}" />
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox Name="PART_TextBox"
                                         attaches:DynamicStyleProvider.BasedOn="{DynamicResource {x:Type TextBox}}"
                                         attaches:DynamicStyleProvider.Derived="{StaticResource ContentHostControl}"
                                         IsReadOnly="{TemplateBinding IsReadOnly}"
                                         Text="{Binding ValueText, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
                                <Grid Grid.Column="1" attaches:GridAttach.RowDefinitions="*,*">
                                    <Grid.Resources>
                                        <Style TargetType="Path">
                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                            <Setter Property="VerticalAlignment" Value="Center" />
                                            <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                                        </Style>
                                    </Grid.Resources>
                                    <Button Padding="2"
                                            Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IncreaseCommand}"
                                            IsEnabled="{TemplateBinding IsIncreaseEnabled}">
                                        <Path Data="M 0 3 L 3 0 L 6 3 Z" />
                                    </Button>
                                    <Button Grid.Row="1"
                                            Padding="2"
                                            Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ReduceCommand}"
                                            IsEnabled="{TemplateBinding IsReduceEnabled}">
                                        <Path Data="M 0 0 L 3 3 L 6 0 Z" />
                                    </Button>
                                </Grid>
                                <!--<UniformGrid Grid.Column="1" Columns="1" />-->
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />-->
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                            <!--<Setter TargetName="Calendar" Property="Foreground" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="controls:NumericUpDown" />

    <Style x:Key="DragCanvasBaseStyle" TargetType="controls:DragCanvas">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="LineBrush" Value="{DynamicResource DragCanvasLineBrush}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="添加流程" ItemsSource="{attaches:EnumBindingSource EnumType=controls:StepType}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Header" Value="{Binding}" />
                                <Setter Property="Command" Value="{Binding DataContext.AddStepItemCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Header}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Command="{Binding DeleteStepItemCommand}" Header="删除选中流程" />
                    <MenuItem Command="{Binding SaveAsImageCommand}" Header="保存为Png" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="{Binding Scale, RelativeSource={RelativeSource AncestorType=Canvas}}"
                                ScaleY="{Binding Scale, RelativeSource={RelativeSource AncestorType=Canvas}}"/>
            </Setter.Value>
        </Setter>-->
    </Style>
    <Style BasedOn="{StaticResource DragCanvasBaseStyle}" TargetType="controls:DragCanvas" />

    <Style x:Key="StepItemBaseStyle" TargetType="controls:StepItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="40" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource SystemColorsWindow}" />
        <Setter Property="BorderBrush" Value="{DynamicResource EnvironmentMainWindowActiveDefaultBorder}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:StepItem">
                    <controls:ShapeBorder x:Name="ShapeBorder"
                                          Background="{TemplateBinding Background}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          Geometry="{Binding Geometry, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}">
                        <controls:SimplePanel>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <!--  左边的中间圆形  -->
                            <controls:EllipseItem x:Name="EllipseLeft"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  Orientation="Left" />
                            <!--  顶边的中间圆形  -->
                            <controls:EllipseItem x:Name="EllipseTop"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Top"
                                                  Orientation="Top" />
                            <!--  右边的中间圆形  -->
                            <controls:EllipseItem x:Name="EllipseRight"
                                                  HorizontalAlignment="Right"
                                                  VerticalAlignment="Center"
                                                  Orientation="Right" />
                            <!--  底边的中间圆形  -->
                            <controls:EllipseItem x:Name="EllipseBottom"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Bottom"
                                                  Orientation="Bottom" />

                            <Thumb x:Name="PART_Thumb"
                                   Width="16"
                                   Height="16"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Bottom"
                                   Cursor="SizeNWSE"
                                   Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsSelected, Converter={StaticResource BoolToVisibilityConverter}}">
                                <Thumb.Clip>
                                    <PathGeometry>
                                        <PathFigure StartPoint="0,16">
                                            <LineSegment Point="16,0" />
                                            <LineSegment Point="16,16" />
                                            <LineSegment Point="0,16" />
                                        </PathFigure>
                                    </PathGeometry>
                                </Thumb.Clip>
                            </Thumb>
                        </controls:SimplePanel>
                    </controls:ShapeBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Orange" />
                            <Setter TargetName="ShapeBorder" Property="IsDashed" Value="True" />
                            <Setter Property="Panel.ZIndex" Value="2147483646" />
                        </Trigger>
                        <Trigger Property="StepType" Value="Begin">
                            <Setter TargetName="ShapeBorder" Property="attaches:CornerRadiusAttach.IsCircular" Value="True" />
                        </Trigger>
                        <Trigger Property="StepType" Value="Condition">
                            <Setter TargetName="ShapeBorder" Property="ShapeType" Value="Diamond" />
                        </Trigger>
                        <Trigger Property="StepType" Value="Reference">
                            <Setter TargetName="ShapeBorder" Property="ShapeType" Value="Parallelogram" />
                        </Trigger>
                        <Trigger Property="StepType" Value="End">
                            <Setter TargetName="ShapeBorder" Property="attaches:CornerRadiusAttach.IsCircular" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource StepItemBaseStyle}" TargetType="controls:StepItem" />

    <Style x:Key="EllipseItemBaseStyle" TargetType="controls:EllipseItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="#FD5618" />
        <Setter Property="BorderBrush" Value="#7B68EE" />
        <Setter Property="Visibility">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource StepItemEllipseItemConverter}">
                    <Binding Path="Orientation" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="StepType" RelativeSource="{RelativeSource AncestorType=controls:StepItem}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource ParallelogramEllipseConverter}">
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="Orientation" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="BorderThickness" RelativeSource="{RelativeSource AncestorType=controls:ShapeBorder}" />
                    <Binding Path="ShapeType" RelativeSource="{RelativeSource AncestorType=controls:ShapeBorder}" />
                    <Binding Path="Shear" RelativeSource="{RelativeSource AncestorType=controls:ShapeBorder}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:EllipseItem">
                    <Ellipse Width="{TemplateBinding Width}"
                             Height="{TemplateBinding Height}"
                             Margin="{TemplateBinding Padding}"
                             Fill="{TemplateBinding Background}"
                             Stroke="{TemplateBinding BorderBrush}"
                             StrokeThickness="{TemplateBinding StrokeThickness}" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="controls:DragCanvas.CanvasStatus" Value="Drawing" />
                            </MultiTrigger.Conditions>
                            <!--<MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard AutoReverse="True" RepeatBehavior="Forever">
                                        <ColorAnimation Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Color)"
                                                        From="#FD5618"
                                                        To="#7B68EE"
                                                        Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>-->
                            <MultiTrigger.Setters>
                                <Setter Property="Height" Value="14" />
                                <Setter Property="Width" Value="14" />
                                <Setter Property="StrokeThickness" Value="3" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="controls:DragCanvas.CanvasStatus" Value="None" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Height" Value="14" />
                                <Setter Property="Width" Value="14" />
                                <Setter Property="StrokeThickness" Value="3" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource EllipseItemBaseStyle}" TargetType="controls:EllipseItem" />

    <Style x:Key="PathItemBaseStyle" TargetType="controls:PathItem">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="是否为曲线"
                              IsCheckable="True"
                              IsChecked="{Binding IsCurve}" />
                    <MenuItem Command="{Binding DeleteCommand}"
                              Header="删除"
                              Icon="{controls:PackIcon Kind=TrashiOS}" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:PathItem">
                    <Grid Background="{TemplateBinding Background}">
                        <Path Fill="#111E1E1E"
                              Stroke="{DynamicResource EnvironmentMainWindowActiveDefaultBorder}"
                              StrokeThickness="2">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure StartPoint="{Binding Point0, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DoNoThingConverter}}">
                                        <BezierSegment Point1="{Binding Point1, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DoNoThingConverter}}"
                                                       Point2="{Binding Point2, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DoNoThingConverter}}"
                                                       Point3="{Binding Point3, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DoNoThingConverter}}" />
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                            <Path.StrokeDashArray>
                                <DoubleCollection>2,2</DoubleCollection>
                            </Path.StrokeDashArray>
                        </Path>
                        <controls:SimplePanel HorizontalAlignment="Center" VerticalAlignment="Center">
                            <!--<TextBlock Text="{TemplateBinding Text}" Background="Transparent" Visibility="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToCollapsedConverter}}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <i:ChangePropertyAction PropertyName="IsSelected"
                                                                TargetObject="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                                Value="True" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBlock>-->
                            <TextBox IsReadOnly="False"
                                     Style="{StaticResource TransparentTextBox}"
                                     Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
                        </controls:SimplePanel>

                        <!--  Arrowhead  -->
                        <Polygon Fill="{DynamicResource EnvironmentMainWindowActiveDefaultBorder}" Points="{Binding Points, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#122E2E2E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource PathItemBaseStyle}" TargetType="controls:PathItem" />

</ResourceDictionary>