<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attaches="clr-namespace:OhmStudio.UI.Attaches">

    <Thickness x:Key="InputControlPadding">2,2</Thickness>

    <Style x:Key="PlaceHolderWithUserControl"
           BasedOn="{StaticResource {x:Type ContentControl}}"
           TargetType="ContentControl">
        <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" />

        <Setter Property="Content" Value="{Binding Path=(TextBoxAttach.PlaceHolder), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Setter Property="Opacity" Value="{Binding Path=(TextBoxAttach.PlaceHolderOpacity), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(TextBoxAttach.PlaceHolderIsHitTestVisible), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Setter Property="Visibility" Value="{Binding Path=(TextBoxAttach.PlaceHolderVisibility), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Style.Triggers>
            <Trigger Property="IsHitTestVisible" Value="False">
                <Setter Property="Focusable" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PlaceHolderWithTemplatedParent"
           BasedOn="{StaticResource PlaceHolderWithUserControl}"
           TargetType="ContentControl">
        <Setter Property="Content" Value="{Binding Path=(TextBoxAttach.PlaceHolder), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Opacity" Value="{Binding Path=(TextBoxAttach.PlaceHolderOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(TextBoxAttach.PlaceHolderIsHitTestVisible), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Visibility" Value="{Binding Path=(TextBoxAttach.PlaceHolderVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <Style x:Key="TitleWithUserControl"
           BasedOn="{StaticResource {x:Type ContentControl}}"
           TargetType="ContentControl">
        <Setter Property="Content" Value="{Binding Path=(TextBoxAttach.Title), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(TextBoxAttach.TitleIsHitTestVisible), RelativeSource={RelativeSource AncestorType=UserControl}}" />
        <Style.Triggers>
            <Trigger Property="IsHitTestVisible" Value="False">
                <Setter Property="Focusable" Value="False" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TitleWithTemplatedParent"
           BasedOn="{StaticResource TitleWithUserControl}"
           TargetType="ContentControl">
        <Setter Property="Content" Value="{Binding Path=(TextBoxAttach.Title), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="IsHitTestVisible" Value="{Binding Path=(TextBoxAttach.TitleIsHitTestVisible), RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <Style x:Key="TextBoxBaseStyle"
           BasedOn="{x:Null}"
           TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxText}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="TextBox.TextWrapping" Value="NoWrap" />
        <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource CommonControlsTextBoxSelection}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{DynamicResource InputControlPadding}" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource CommonControlsTextBoxErrorBorder}" BorderThickness="{TemplateBinding BorderThickness}">
                        <AdornedElementPlaceholder x:Name="Placeholder" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut" />
                    <MenuItem Command="Copy" />
                    <MenuItem Command="Paste" />
                    <MenuItem Command="SelectAll" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <DockPanel>
                        <ContentControl Style="{DynamicResource TitleWithTemplatedParent}" />
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(attaches:BorderAttach.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <ScrollViewer Name="PART_ContentHost" />
                                <ContentControl Margin="{TemplateBinding Padding}" Style="{DynamicResource PlaceHolderWithTemplatedParent}" />
                            </Grid>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundDisabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextDisabled}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextHover}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxBackgroundFocused}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxTextFocused}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxBorderFocused}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <!--
                                OneTime is used to prevent a memory leak since ValidationError doesn't impl INotifyPropertyChanged and gets stored in a static: System.ComponentModel.ReflectTypeDescriptionProvider._propertyCache
                                It holds a reference to the DataContext
                            -->
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Mode=OneTime, Path=(Validation.Errors)[0].ErrorContent}" />
                            <Setter Property="Background" Value="{DynamicResource CommonControlsTextBoxErrorBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource CommonControlsTextBoxErrorForeground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CommonControlsTextBoxErrorBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>